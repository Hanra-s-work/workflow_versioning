name: code_checker_and_mirrorer

on:
  push:
    branches-ignore:
    - "ga-ignore-*"
  pull_request:
    branches-ignore:
    - "ga-ignore-*"

env:
  SOURCE: Hanra-s-work/my_zappy
  MIRROR_URL: "EpitechPromo2027/B-YEP-400-PAR-4-1-zappy-eric1.xu"
  GITHUB_SSH_KEY: ${{ secrets.MIRROR_KEY }}
  EXECUTABLES: "zappy_ai zappy_gui zappy_server"
  NOTIFY_CHANNEL: ntfy.sh/is_up #${{ secrets.NOTIFY_ZAPPY }}
  NOTIFY_LOCATION: ${GITHUB_REPOSITORY}:${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
  CODING_STYLE_CONTAINER: ghcr.io/epitech/coding-style-checker:latest

jobs:

  check_coding_style:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Getting the latest version of (coding-style) ${{env.CODING_STYLE_CONTAINER}}
      run: docker pull ghcr.io/epitech/coding-style-checker:latest
    - name: Run ${{env.CODING_STYLE_CONTAINER}}
      run: |
        CODING_STYLE=coding_style_data
        mkdir -p $CODING_STYLE
        docker run --rm -i -v "$(pwd)/src/server":/mnt/delivery -v "$(pwd)/$CODING_STYLE":/mnt/reports $CODING_STYLE_CONTAINER "/mnt/delivery" "/mnt/reports"
    - name: Checking the results
      run: |
        CONTENT="$(cat coding_style_data/coding-style-reports.log)"
        ILLEGAL_FILES_FOUND=0
        if [ "$CONTENT" == "" ]; then
            echo "No errors were found"
            exit 0
        fi
        while IFS= read -r LINE; do
            FILE=$(echo $LINE | cut -d ':' -f 1)
            LINE_NUMBER=$(echo $LINE | cut -d ':' -f 2)
            LEVEL=$(echo $LINE | cut -d ':' -f 3 | cut -d ' ' -f 2)
            ERROR_CODE=$(echo $LINE | cut -d ':' -f 4)
            echo "::error file=$FILE,line=$LINE_NUMBER,endLine=0,title=$LEVEL coding style error::$ERROR_CODE"
            ILLEGAL_FILES_FOUND=1
        done <<<"$CONTENT"
        if [ $ILLEGAL_FILES_FOUND -eq 1 ]; then
            curl -H "Title: Coding style errors" -H "Priority: medium" -H 'Tags: warning' -d "The coding style reported errors for ${{env.NOTIFY_LOCATION}}" ${{env.NOTIFY_CHANNEL}}
            exit 1
        else
            exit 0
        fi

  check_program_compilation:
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Pull Docker image
      run: docker pull epitechcontent/epitest-docker
    - name: Compile code
      run: |
        docker run -v "$(pwd)":"/home/" -i epitechcontent/epitest-docker /bin/bash -c "cd /home && make"
        if [ $? -ne 0 ]
        then
            curl -H "Title: Build failed" -H "Priority: high" -H 'Tags: warning,skull' -d "The build failed for ${{env.NOTIFY_LOCATION}}" ${{env.NOTIFY_CHANNEL}}
            exit 1
        fi
    - name: Clean code
      run: |
        docker run -v "$(pwd)":"/home/" -i epitechcontent/epitest-docker /bin/bash -c "cd /home && make clean"
        if [ $? -ne 0 ]
        then
            curl -H "Title: clean failed" -H "Priority: high" -H 'Tags: warning,skull' -d "The clean failed for ${{env.NOTIFY_LOCATION}}" ${{env.NOTIFY_CHANNEL}}
            exit 1
        fi
    - name: Check if present and executable
      run: |
        IFS=',' read -ra VARS <<< "${EXECUTABLES}"
        for EXE in $EXECUTABLES; do
            if [ ! -e "$EXE" ]; then
                echo "::error file=$EXE,line=1,endLine=0,title='NOT FOUND' ::The file '$EXE' does not exist"
                curl -H "Title: No binary found" -H "Priority: high" -H 'Tags: warning,skull' -d "'$EXE' not found or not executable for ${{env.NOTIFY_LOCATION}}" ${{env.NOTIFY_CHANNEL}}
                exit 1
            else
                echo "$EXE is executable"
            fi
        done

  push_to_mirror:
    runs-on: ubuntu-latest
    needs: [check_program_compilation, check_coding_style]
    if: success()
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Push the content to the mirror repository
      uses: pixta-dev/repository-mirroring-action@v1
      with:
        target_repo_url: git@github.com:${{ env.MIRROR_URL }}.git
        ssh_private_key: ${{ env.GITHUB_SSH_KEY }}

